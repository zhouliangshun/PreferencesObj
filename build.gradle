buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }

    }
    dependencies {
        //classpath 'me.tatarka:gradle-retrolambda:3.2.3'
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    //id "com.github.dcendents.android-maven" version "2.0"
}

version = "1.0.0"
project.group = "com.kylins.libs"

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'
}

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.3"

    defaultConfig {
        versionCode 1
        versionName "1.0"
        minSdkVersion 18
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            systemProperty 'robolectric.dependency.repo.url', 'http://maven.aliyun.com/nexus/content/groups/public/'
            systemProperty 'robolectric.dependency.repo.id', 'sonatype'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.+'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            name 'PreferencesObj'
            description 'It\'s sample android save a object to SharePreferences'
            url 'https://github.com/zhouliangshun/PreferencesObj'
            inceptionYear '2017'

            packaging 'aar'
            groupId 'com.kylins.libs'
            artifactId 'preferences-object'
            version '1.0.0'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection 'https://github.com/zhouliangshun/PreferencesObj.git'
                url 'https://github.com/zhouliangshun/PreferencesObj'

            }
            developers {
                developer {
                    name 'zhouliangshun'
                    id 'zhouliangshun'
                    email 'liangshunzhou@hotmail.com'
                }
            }

//            pom.withXml {
//                configurations.compile.allDependencies.each {
//                    def dependencyNode = dependenciesNode.appendNode('dependency')
//                    dependencyNode.appendNode('groupId', it.group)
//                    dependencyNode.appendNode('artifactId', it.name)
//                    dependencyNode.appendNode('version', it.version)
//                }
//            }
        }
    }
}

bintray {
    user = project.property("bintray.user")
    key = project.property("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = 'kylins'
        name = 'PreferencesObj'
        userOrg = 'zhouliangshun'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/zhouliangshun/PreferencesObj.git'
        websiteUrl = 'https://github.com/zhouliangshun/PreferencesObj'
        githubRepo = 'zhouliangshun/PreferencesObj'
        desc = 'It\'s sample android save a object to SharePreferences'
        githubReleaseNotesFile = 'README.md'

        dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
        publish = true //[Default: false] Whether version should be auto published after an upload
        override = false //[Default: false] Whether to override version artifacts already published

        version {
            name = '1.0.0'
            released = new Date()
            vcsTag = '1.0.0'
            desc = 'It\'s a frist develop version'

            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = project.property("bintray.gpg.passphrase")
                //Optional. The passphrase for GPG signing'
            }

            mavenCentralSync {
                sync = true
                //[Default: true] Determines whether to sync the version to Maven Central.
                user = project.property("bintray.maven.user") //OSS user token: mandatory
                password = project.property("bintray.maven.password") //OSS user password: mandatory
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }

        }


    }
}




